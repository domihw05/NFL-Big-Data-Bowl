#library(ResourceSelection)
hoslem.test(tracking_pass_rush_clean$blitzing,predicted_probs)
dom_mov_data <- tracking_week_1 |>
group_by(gameId, playId, nflId) |>
left_join(player_raw_data, by = c("nflId"))
tracking_qb <- dom_mov_data |>
filter(position == "QB") |>
select(gameId, playId, frameId, x_qb = x, y_qb = y)
movement_data <- dom_mov_data |>
filter(frameType == "BEFORE_SNAP") |>
group_by(gameId, playId, nflId) |>
summarize(
total_movement = sum(sqrt((x - lag(x, default = first(x)))^2 + (y - lag(y, default = first(y)))^2), na.rm = TRUE),
.groups = "drop"  # Explicitly drop grouping
)
tracking_pass_rush <- dom_mov_data |>
filter(position %in% c("SS","FS","CB","ILB","OLB")) |>
left_join(tracking_qb, by = c("gameId","playId","frameId")) |>
group_by(gameId, playId, frameId) |>
mutate(d_qb = sqrt((x - x_qb) ^ 2 + (y - y_qb) ^ 2),
v_qb = -(d_qb - lag(d_qb)) / 0.1) |>
ungroup() |>
left_join(movement_data, by = c("gameId","playId","nflId.x" = "nflId"))
tracking_pass_rush <- tracking_pass_rush |>
select(gameId,playId,frameId,nflId.x,displayName.x,frameType,time,playDirection,
x,y,s,a,dis,o,dir,event,position,x_qb,y_qb,d_qb,v_qb,total_movement) |>
mutate(blitzing = ifelse((dir > 180 | d_qb < 8) & v_qb > 5 & frameType == "AFTER_SNAP",TRUE,FALSE))
# Remove rows with NA values in blitzing
tracking_pass_rush_clean <- tracking_pass_rush |>
filter(!is.na(blitzing))
# Create models
predicting_blitz.blogr <- glm(blitzing ~ total_movement, data = tracking_pass_rush_clean,
family = binomial(link="logit"))
predicting_blitz.lm <- lm(blitzing~total_movement,tracking_pass_rush)
predicted_probs <- predict(predicting_blitz.lm, type = "response")
# Test if the data are logistic
#library(ResourceSelection)
#hoslem.test(tracking_pass_rush_clean$blitzing,predicted_probs)
# Summarize both models
summary(predicting_blitz.blogr)
summary(predicting_blitz.lm)
# Found correlation between pre-snap movement and whether or not that player blitzed
dom_mov_data <- tracking_week_1 |>
group_by(gameId, playId, nflId) |>
left_join(player_raw_data, by = c("nflId"))
tracking_qb <- dom_mov_data |>
filter(position == "QB") |>
select(gameId, playId, frameId, x_qb = x, y_qb = y)
movement_data <- dom_mov_data |>
filter(frameType == "BEFORE_SNAP") |>
group_by(gameId, playId, nflId) |>
summarize(
total_movement = sum(sqrt((x - lag(x, default = first(x)))^2 + (y - lag(y, default = first(y)))^2), na.rm = TRUE),
.groups = "drop"  # Explicitly drop grouping
)
tracking_pass_rush <- dom_mov_data |>
filter(position %in% c("SS","FS","CB","ILB","OLB")) |>
left_join(tracking_qb, by = c("gameId","playId","frameId")) |>
group_by(gameId, playId, frameId) |>
mutate(d_qb = sqrt((x - x_qb) ^ 2 + (y - y_qb) ^ 2),
v_qb = -(d_qb - lag(d_qb)) / 0.1) |>
ungroup() |>
left_join(movement_data, by = c("gameId","playId","nflId.x" = "nflId"))
tracking_pass_rush <- tracking_pass_rush |>
select(gameId,playId,frameId,nflId.x,displayName.x,frameType,time,playDirection,
x,y,s,a,dis,o,dir,event,position,x_qb,y_qb,d_qb,v_qb,total_movement) |>
mutate(blitzing = ifelse((dir > 180 | d_qb < 8) & v_qb > 5 & frameType == "AFTER_SNAP",TRUE,FALSE))
# Remove rows with NA values in blitzing
tracking_pass_rush_clean <- tracking_pass_rush |>
filter(!is.na(blitzing))
# Create models
predicting_blitz.blogr <- glm(blitzing ~ total_movement, data = tracking_pass_rush_clean,
family = binomial(link="logit"))
predicting_blitz.lm <- lm(blitzing~total_movement,tracking_pass_rush)
predicted_probs <- predict(predicting_blitz.lm, type = "response")
# Test if the data are logistic
library(ResourceSelection)
hoslem.test(tracking_pass_rush_clean$blitzing,predicted_probs)
# Summarize both models
summary(predicting_blitz.blogr)
summary(predicting_blitz.lm)
# Found correlation between pre-snap movement and whether or not that player blitzed
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
View(plays_raw_data)
View(plays_raw_data)
View(tracking_pass_rush_clean)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation.x),
by = c("gameId", "playId"))
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x + offenseFormation.y,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
print(mcfadden_r2)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
print(mcfadden_r2)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation * down,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation,down),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation + down,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
View(tracking_pass_rush_clean)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation.x + down,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation,gameClock),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation,gameClock),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x + gameClock,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation,gameClock),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x + gameClock.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation, yardsToGo),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x, yardsToGo.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation, yardsToGo),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x, yardsToGo,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation, yardsToGo),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x + yardsToGo,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation, yardsToGo),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x + yardsToGo,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation, yardsToGo),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x + yardsToGo.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
# Merge offensive formation data
tracking_pass_rush_clean <- tracking_pass_rush_clean %>%
left_join(plays_raw_data %>% select(gameId, playId, offenseFormation),
by = c("gameId", "playId"))
# Check the updated data
head(tracking_pass_rush_clean)
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
print(mcfadden_r2)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
library(pscl)
# Calculate McFadden's R²
mcfadden_r2 <- pR2(predicting_blitz.blogr)
predicting_blitz.blogr <- glm(blitzing ~ total_movement * offenseFormation.x,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
summary(predicting_blitz.blogr)
tracking_blitz_data <- tracking_pass_rush_clean %>%
left_join(plays_raw_data, by = c("gameId", "playId")) %>%
mutate(motion_flag = ifelse(total_movement > 3, 1, 0))  # Threshold for motion
tracking_blitz_data <- tracking_pass_rush_clean %>%
left_join(plays_raw_data, by = c("gameId", "playId")) %>%
mutate(motion_flag = ifelse(total_movement > 3, 1, 0))  # Threshold for motion
predicting_blitz <- glm(blitzing ~ total_movement +
offensiveFormation +
down + yardsToGo +
motion_flag +
d_qb,
family = binomial(link = "logit"),
data = tracking_blitz_data)
tracking_blitz_data <- tracking_pass_rush_clean %>%
left_join(plays_raw_data, by = c("gameId", "playId")) %>%
mutate(motion_flag = ifelse(total_movement > 3, 1, 0))  # Threshold for motion
predicting_blitz <- glm(blitzing ~ total_movement +
offensiveFormation.x +
down + yardsToGo +
motion_flag +
d_qb,
family = binomial(link = "logit"),
data = tracking_blitz_data)
tracking_blitz_data <- tracking_pass_rush_clean %>%
left_join(plays_raw_data, by = c("gameId", "playId")) %>%
mutate(motion_flag = ifelse(total_movement > 3, 1, 0))  # Threshold for motion
predicting_blitz <- glm(blitzing ~ total_movement +
offensiveFormation +
down + yardsToGo +
motion_flag +
d_qb,
family = binomial(link = "logit"),
data = tracking_blitz_data)
View(tracking_blitz_data)
tracking_blitz_data <- tracking_pass_rush_clean %>%
left_join(plays_raw_data, by = c("gameId", "playId")) %>%
mutate(motion_flag = ifelse(total_movement > 3, 1, 0))  # Threshold for motion
predicting_blitz <- glm(blitzing ~ total_movement +
offensiveFormation.x +
down + yardsToGo +
motion_flag +
d_qb,
family = binomial(link = "logit"),
data = tracking_blitz_data)
knitr::opts_chunk$set(echo = TRUE)
install.packages("randomForest")  # Install the package
library(randomForest)             # Load the package
# Prepare the data
tracking_blitz_data <- tracking_pass_rush_clean %>%
mutate(blitzing = as.factor(blitzing))  # Convert target variable to factor for classification
install.packages("randomForest")  # Install the package
library(randomForest)             # Load the package
# Prepare the data
tracking_blitz_data <- tracking_pass_rush_clean |>
mutate(blitzing = as.factor(blitzing))  # Convert target variable to factor for classification
knitr::opts_chunk$set(echo = TRUE)
install.packages("randomForest")  # Install the package
library(randomForest)             # Load the package
# Prepare the data
tracking_blitz_data <- tracking_pass_rush_clean |>
mutate(blitzing = as.factor(blitzing))  # Convert target variable to factor for classification
# Logistic Regression with interaction terms
blitz_logit <- glm(blitzing ~ total_movement + offenseFormation + down + yardsToGo +
total_movement:offenseFormation,
family = binomial(link = "logit"), data = tracking_pass_rush_clean)
#Click to clear environment
rm(list = ls())
# Increase memory size (Windows only)
memory.limit(size = 64000)  # Adjust as needed
library(tidyverse)
player_raw_data <- read_csv("players.csv")
plays_raw_data <- read_csv("plays.csv")
games_raw_data <- read_csv("games.csv")
tracking_week_1 <- read_csv("tracking_week_1.csv")
#putting all the tracking data into one file
#tracking <- list.files(pattern = "week") |>
# map(read_csv) |>
#list_rbind()
#tracking <- tracking |>
#mutate(
# make all plays go from left to right
# x = ifelse(playDirection == "left", 120 - x, x),
#  y = ifelse(playDirection == "left", 160 / 3 - y, y),
# flip player direction and orientation
# dir = ifelse(playDirection == "left", dir + 180, dir),
# dir = ifelse(dir > 360, dir - 360, dir),
#  o = ifelse(playDirection == "left", o + 180, o),
#   o = ifelse(o > 360, o - 360, o)
#  )
tracking_week_1 <- tracking_week_1 |>
mutate(
# make all plays go from left to right
x = ifelse(playDirection == "left", 120 - x, x),
y = ifelse(playDirection == "left", 160 / 3 - y, y),
# flip player direction and orientation
dir = ifelse(playDirection == "left", dir + 180, dir),
dir = ifelse(dir > 360, dir - 360, dir),
o = ifelse(playDirection == "left", o + 180, o),
o = ifelse(o > 360, o - 360, o)
)
dom_mov_data <- tracking_week_1 |>
group_by(gameId, playId, nflId) |>
left_join(player_raw_data, by = c("nflId"))
tracking_qb <- dom_mov_data |>
filter(position == "QB") |>
select(gameId, playId, frameId, x_qb = x, y_qb = y)
movement_data <- dom_mov_data |>
filter(frameType == "BEFORE_SNAP") |>
group_by(gameId, playId, nflId) |>
summarize(
total_movement = sum(sqrt((x - lag(x, default = first(x)))^2 + (y - lag(y, default = first(y)))^2), na.rm = TRUE),
.groups = "drop"  # Explicitly drop grouping
)
tracking_pass_rush <- dom_mov_data |>
filter(position %in% c("SS","FS","CB","ILB","OLB")) |>
left_join(tracking_qb, by = c("gameId","playId","frameId")) |>
group_by(gameId, playId, frameId) |>
mutate(d_qb = sqrt((x - x_qb) ^ 2 + (y - y_qb) ^ 2),
v_qb = -(d_qb - lag(d_qb)) / 0.1) |>
ungroup() |>
left_join(movement_data, by = c("gameId","playId","nflId.x" = "nflId"))
tracking_pass_rush <- tracking_pass_rush |>
select(gameId,playId,frameId,nflId.x,displayName.x,frameType,time,playDirection,
x,y,s,a,dis,o,dir,event,position,x_qb,y_qb,d_qb,v_qb,total_movement) |>
mutate(blitzing = ifelse((dir > 180 | d_qb < 8) & v_qb > 5 & frameType == "AFTER_SNAP",TRUE,FALSE))
# Remove rows with NA values in blitzing
tracking_pass_rush_clean <- tracking_pass_rush |>
left_join(plays_raw_data |> select(gameId, playId, offenseFormation, playClockAtSnap, pff_passCoverage,down,yardsToGo), by = c("gameId", "playId")) |>
mutate(motion_flag = ifelse(total_movement > 3, 1, 0)) |>
filter(
!is.na(blitzing),
!is.na(total_movement),
!is.na(offenseFormation),
!is.na(playClockAtSnap)
)
# Check updated data
head(tracking_pass_rush_clean)
# Create model
predicting_blitz.blogr <- glm(blitzing ~ total_movement + offenseFormation + playClockAtSnap,
data = tracking_pass_rush_clean,
family = binomial(link = "logit"))
predicted_probs <- predict(predicting_blitz.blogr, type = "response")
predicting_blitz <- glm(blitzing ~ total_movement +
offenseFormation +
down + yardsToGo +
motion_flag +
d_qb,
family = binomial(link = "logit"),
data = tracking_pass_rush_clean)
# Test if the data are logistic
library(ResourceSelection)
hoslem.test(tracking_pass_rush_clean$blitzing,predicted_probs)
# Summarize both models
summary(predicting_blitz.blogr)
summary(predicting_blitz)
# Found correlation between pre-snap movement and whether or not that player blitzed
install.packages("randomForest")  # Install the package
library(randomForest)             # Load the package
# Prepare the data
tracking_blitz_data <- tracking_pass_rush_clean |>
mutate(blitzing = as.factor(blitzing))  # Convert target variable to factor for classification
# Keep only relevant columns
tracking_blitz_data <- tracking_blitz_data %>%
select(blitzing, total_movement, offenseFormation, down, yardsToGo, d_qb)
# Fit the Random Forest model
# Subsample the data to 50% of rows
set.seed(123)
small_data <- tracking_blitz_data %>%
sample_frac(0.5)
# Fit the Random Forest model on the smaller dataset
blitz_rf <- randomForest(blitzing ~ total_movement + offenseFormation + down + yardsToGo + d_qb,
data = small_data,
ntree = 100,
mtry = 3,
importance = TRUE)
