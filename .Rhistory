tree_predictions <- factor(tree_predictions, levels = c(0, 1))
plays_filtered$success <- factor(plays_filtered$success, levels = c(0, 1))
# Create a confusion matrix
tree_conf_matrix <- confusionMatrix(tree_predictions, plays_filtered$success)
# Print the confusion matrix
print(tree_conf_matrix)
# Load the randomForest package
library(randomForest)
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Fit a random forest model
rf_model <- randomForest(passResult ~ playClockAtSnap + down + yardsToGo + passLength +
pff_passCoverage + dropbackType,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow, dropbackType)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow, dropbackType)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(passResult ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(passResult,playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow, dropbackType)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(passResult ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow, dropbackType)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(passResult ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow, dropbackType)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
#passResult ~ playClockAtSnap + down + yardsToGo + passLength + pff_passCoverage + dropbackType
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0))
plays_filtered <- plays_filtered %>% filter(!is.na(success))
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
library(pscl)
pseudo_r2 <- pR2(success_model)
print(pseudo_r2)
# Load the randomForest package
library(randomForest)
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Ensure categorical variables are factors
plays_filtered <- plays_filtered %>%
mutate(
offenseFormation = as.factor(offenseFormation),
pff_passCoverage = as.factor(pff_passCoverage)
)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0))
plays_filtered <- plays_filtered %>% filter(!is.na(success))
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
View(plays_filtered)
# Load the randomForest package
library(randomForest)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0))
plays_filtered <- plays_filtered %>% filter(!is.na(success))
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
# Load necessary packages
library(randomForest)
library(caret)
library(pscl)
# Convert passResult to binary success (1 for complete pass, 0 for others)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0)) %>%
filter(!is.na(success))
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Ensure categorical variables are factors
plays_filtered <- plays_filtered %>%
mutate(
offenseFormation = as.factor(offenseFormation),
pff_passCoverage = as.factor(pff_passCoverage)
)
# Fit a Random Forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered, type = "response")
predictions <- as.factor(predictions)
# Convert success to a factor
plays_filtered$success <- as.factor(plays_filtered$success)
# Confusion matrix
confusion_matrix <- confusionMatrix(predictions, plays_filtered$success)
# Load necessary packages
library(randomForest)
library(caret)
library(pscl)
# Convert passResult to binary success (1 for complete pass, 0 for others)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0)) %>%
filter(!is.na(success))
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Ensure categorical variables are factors
plays_filtered <- plays_filtered %>%
mutate(
offenseFormation = as.factor(offenseFormation),
pff_passCoverage = as.factor(pff_passCoverage)
)
# Fit a Random Forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + playAction + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Load the randomForest package
library(randomForest)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0))
plays_filtered <- plays_filtered %>% filter(!is.na(success))
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
knitr::opts_chunk$set(echo = TRUE)
#Click to clear environment
rm(list = ls())
# Increase memory size (Windows only)
memory.limit(size = 64000)  # Adjust as needed
library(tidyverse)
player_raw_data <- read_csv("players.csv")
plays_raw_data <- read_csv("plays.csv")
games_raw_data <- read_csv("games.csv")
# List all files matching the pattern "week" (e.g., "tracking_week_1.csv")
files <- list.files(pattern = "week", full.names = TRUE)
tracking_list <- list()
for (file in files) {
tracking <- read_csv(file)
tracking <- tracking |>
mutate(
# make all plays go from left to right
x = ifelse(playDirection == "left", 120 - x, x),
y = ifelse(playDirection == "left", 160 / 3 - y, y),
# flip player direction and orientation
dir = ifelse(playDirection == "left", dir + 180, dir),
dir = ifelse(dir > 360, dir - 360, dir),
o = ifelse(playDirection == "left", o + 180, o),
o = ifelse(o > 360, o - 360, o)
)
tracking_list[[file]] <- tracking
}
plays_filtered <- plays_raw_data %>%
filter(!is.na(passResult))
ggplot(plays_filtered, aes(x = passResult)) +
geom_bar(fill = "steelblue") +
labs(
title = "Distribution of Pass Results",
x = "Pass Result",
y = "Count"
) +
theme_minimal()
ggplot(plays_filtered, aes(x = yardsGained)) +
geom_histogram(binwidth = 5, fill = "steelblue", color = "black") +
labs(
title = "Distribution of Yards Gained",
x = "Yards Gained",
y = "Frequency"
) +
theme_minimal()
ggplot(plays_filtered, aes(x = yardsToGo)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(
title = "Distribution of Yards to Go",
x = "Yards to Go",
y = "Frequency"
) +
theme_minimal()
plays_raw_data <- plays_raw_data %>%
mutate(playClockCategory =
case_when(playClockAtSnap >= 15 ~ "playClock More Than 15s",
playClockAtSnap >= 5 &
playClockAtSnap < 15 ~ "playClock Between 5s and 15s",
playClockAtSnap < 5 ~ "playClock Less Than 5s",
)
)
plays_filtered <- plays_raw_data %>%
filter(!is.na(playClockCategory), !is.na(passResult))
ggplot(plays_filtered, aes(x = playClockCategory)) +
geom_bar(fill = "steelblue", color = "black") +
labs(
title = "Frequency of Play Clock Categories",
x = "Play Clock Category",
y = "Count"
) +
theme_minimal()
ggplot(plays_filtered, aes(x = playClockCategory, fill = passResult)) +
geom_bar(position = "fill") +
labs(
title = "Play Outcomes by Play Clock Category",
x = "Play Clock Category",
y = "Proportion",
fill = "Pass Result"
) +
theme_minimal()
contingency_table <- table(plays_filtered$playClockCategory,
plays_filtered$passResult)
chi_sq_test <- chisq.test(contingency_table)
print(chi_sq_test)
ggplot(plays_filtered, aes(x = playClockCategory, y = yardsGained,
fill = playClockCategory)) +
geom_boxplot() +
labs(
title = "Yards Gained by Play Clock Category",
x = "Play Clock Category",
y = "Yards Gained"
) +
theme_minimal() +
theme(legend.position = "none")
# Summarize yardsGained by playClockCategory
plays_summary <- plays_filtered |>
group_by(playClockCategory) |>
summarize(
mean_yards = mean(yardsGained, na.rm = TRUE),
sd_yards = sd(yardsGained, na.rm = TRUE),  # Standard deviation
min_yards = min(yardsGained, na.rm = TRUE),
max_yards = max(yardsGained, na.rm = TRUE),
n = n()
)
print(plays_summary)
heatmap_data <- plays_filtered %>%
filter(!is.na(playClockCategory), !is.na(yardsToGo), yardsToGo >= 0, yardsToGo <= 30) %>%
mutate(
yardsToGoBucket = cut(
yardsToGo, breaks = c(0, 5, 10, 15, 20, 30),
right = FALSE, include.lowest = TRUE
)
) %>%
group_by(playClockCategory, yardsToGoBucket) %>%
summarize(success_rate = mean(passResult == "C", na.rm = TRUE), .groups = "drop")
ggplot(heatmap_data, aes(x = playClockCategory, y = yardsToGoBucket, fill = success_rate)) +
geom_tile() +
labs(
title = "Success Rate Heatmap",
x = "Play Clock Category",
y = "Yards to Go Bucket",
fill = "Success Rate"
) +
theme_minimal() +
scale_fill_gradient(low = "red", high = "green")
library(nnet)
plays_filtered <- plays_filtered %>%
mutate(
playClockCategory = factor(playClockCategory),
passResult = factor(passResult)
) |>
filter(!is.na(passResult), !is.na(playClockAtSnap))
multinom_model <- multinom(passResult ~ playClockAtSnap, data = plays_filtered)
summary(multinom_model)
predictions <- predict(multinom_model, type = "probs")
nrow(plays_filtered)
nrow(predictions)
plays_filtered <- cbind(plays_filtered, predictions)
predicted_probs_df <- plays_filtered %>%
select(playClockAtSnap, passResult, C, I, IN, R, S) %>%
pivot_longer(
cols = C:S,
names_to = "Predicted_Class",
values_to = "Probability"
)
ggplot(predicted_probs_df, aes(x = playClockAtSnap, y = Probability, color =
Predicted_Class)) +
geom_line(stat = "smooth", method = "loess") +
labs(
title = "Predicted Probabilities by Play Clock at Snap",
x = "Play Clock at Snap",
y = "Predicted Probability",
color = "Pass Result"
) +
theme_minimal()
# Get predicted classes from the model
predicted_classes <- predict(multinom_model, type = "class")
# Check distribution of predicted classes
table(predicted_classes)
# Compare with the actual distribution
table(plays_filtered$passResult)
#filter out relevant variables for model
plays_filtered2 <- plays_raw_data |>
filter(!is.na(playClockAtSnap), !is.na(yardsToGo), !is.na(gameClock), !is.na(down))
playClock_model <- lm(playClockAtSnap ~ yardsToGo + gameClock + down + offenseFormation,
data = plays_filtered2)
summary(playClock_model)
# Fit a linear model
win_prob_model <- lm(expectedPointsAdded ~ playClockAtSnap + yardsToGo + down +
gameClock + offenseFormation,
data = plays_filtered2)
# Summarize the model
summary(win_prob_model)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0))
plays_filtered <- plays_filtered %>% filter(!is.na(success))
success_model <- multinom(
passResult ~ playClockAtSnap + down + yardsToGo + passLength +
pff_passCoverage + dropbackType,
data = plays_filtered
)
summary(success_model)
library(caret)
plays_filtered <- plays_filtered %>% filter(!is.na(success))
predictions <- predict(success_model, newdata = plays_filtered)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
confusion_matrix <- confusionMatrix(as.factor(predictions), as.factor(plays_filtered$passResult))
print(confusion_matrix)
library(pscl)
pseudo_r2 <- pR2(success_model)
print(pseudo_r2)
# Load the randomForest package
library(randomForest)
plays_filtered <- plays_filtered %>%
mutate(success = ifelse(passResult == "C", 1, 0))
plays_filtered <- plays_filtered %>% filter(!is.na(success))
# Remove rows with missing values in relevant variables
plays_filtered <- plays_filtered %>%
drop_na(playClockAtSnap, down, yardsToGo, offenseFormation, passLength, pff_passCoverage, playAction, timeToThrow)
# Fit a random forest model
rf_model <- randomForest(success ~ playClockAtSnap + down + yardsToGo + offenseFormation + passLength + pff_passCoverage + timeToThrow,
data = plays_filtered, ntree = 500, mtry = 3, importance = TRUE)
# Print the model summary
print(rf_model)
# View variable importance
importance(rf_model)
# Plot variable importance
varImpPlot(rf_model)
# Make predictions
predictions <- predict(rf_model, plays_filtered)
# Confusion matrix
library(caret)
confusionMatrix(predictions, as.factor(plays_filtered$success))
